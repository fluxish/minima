<?php

namespace Minima;

require_once dirname(__FILE__).'/../../../minima/config.php';

/**
 * Test class for Config.
 * Generated by PHPUnit on 2011-09-25 at 18:38:13.
 */
class ConfigTest extends \PHPUnit_Framework_TestCase
{

    /**
     * @var Config
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        global $_SERVER;
        $_SERVER = array('HTTP_HOST'=>'http://www.example.com');
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
        unset($_SERVER);
    }
    
    /**
     * Test creation of new Config object by the factory
     * @test
     */
    public function test_factory()
    {
        $object = Config::factory();
        // check if Config has loaded base config class
        $this->assertNotEmpty($object->item('base_url'));
    }
    
    /**
     * Test creation of new Config object by the factory with a config file
     * @test
     */
    public function test_factory_with_file()
    {
        $object = Config::factory('config');
        // check if Config has loaded base config class but not autoloaded config files
        $this->assertNotEmpty($object->item('base_url'));
        try{
            $object->item('configs');
        } catch (\InvalidArgumentException $ex){
           return;
        }
    }

    /**
     * @todo Implement testItem().
     * @test
     */
    public function test_item()
    {
        $object = Config::factory('autoload');
        // check if Config has loaded base config class
        $this->assertNotEmpty($object->item('configs'));
    }

    /**
     * @todo Implement testSet().
     * @test
     */
    public function test_set()
    {
        $object = Config::factory();
        $object->set('item_string','string');
        $object->set('item_number',1);
        $object->set('item_bool',false);
        // check if Config has loaded base config class
        $this->assertEquals('string', $object->item('item_string'));
        $this->assertEquals(1, $object->item('item_number'));
        $this->assertEquals(false, $object->item('item_bool'));
    }

    /**
     * @todo Implement testLoad().
     * @test
     */
    public function test_load()
    {
        $object = Config::factory('autoload');
        $object->load('config');
        // check if Config has loaded base config class
        $this->assertNotEmpty($object->item('base_url'));
    }

}

?>
